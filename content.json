{"meta":{"title":"晓雪如烟的个人博客","subtitle":"","description":"这是一个闲暇时间更新的个人博客","author":"xxry","url":"https://xxry.vip","root":"/"},"pages":[{"title":"about","date":"2021-02-22T04:58:41.000Z","updated":"2021-02-23T14:20:12.747Z","comments":false,"path":"about/index.html","permalink":"https://xxry.vip/about/index.html","excerpt":"","text":"这是自己闲暇之余做的个人博客，好记性不如烂笔头嘛。"},{"title":"tags","date":"2021-02-22T04:23:56.000Z","updated":"2021-02-23T14:31:03.753Z","comments":false,"path":"tags/index.html","permalink":"https://xxry.vip/tags/index.html","excerpt":"","text":""},{"title":"links","date":"2021-02-22T05:16:37.000Z","updated":"2021-02-22T05:16:37.895Z","comments":true,"path":"links/index.html","permalink":"https://xxry.vip/links/index.html","excerpt":"","text":""}],"posts":[{"title":"NoClassDefFoundError和ClassNotFoundException的区别","slug":"2-20210224-3","date":"2021-02-24T13:22:47.000Z","updated":"2021-02-24T13:27:53.220Z","comments":true,"path":"2021/02/24/2-20210224-3/","link":"","permalink":"https://xxry.vip/2021/02/24/2-20210224-3/","excerpt":"","text":"1.NoClassDefFoundError是一个错误，而ClassNotFoundException是一个异常（Error一般为系统异常或者jvm异常；Exception一般为逻辑上可以避免或逻辑上不能避免但是jvm可以检测到的异常。） 2.NoClassDefFoundError是指jvm加载类的时候某个类没有找到导致的错误。一般是ClassLoader尝试加载类（例如引用或者new对象时），找不到这个类的定义，此时会造成这个错误。当部署项目时候，jar包或定义的类丢失会导致该问题。 3.ClassNotFoundException是指编译时没有发现问题，但是在项目运行时或调用方法的时候报错。例如：Class c = Class.forName(“com.xxry.TestClass”).此时可以编译通过，但是运行该代码是，如果没有找到com.xxry.TestClass类时就会出现该异常。 注：Exception包括RuntimeException(运行时异常)和CheckedException(检查异常) 常见种类","categories":[{"name":"back-end","slug":"back-end","permalink":"https://xxry.vip/categories/back-end/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://xxry.vip/tags/%E9%9D%A2%E8%AF%95/"},{"name":"Exception","slug":"Exception","permalink":"https://xxry.vip/tags/Exception/"}]},{"title":"Exception的常见种类","slug":"2-20210224-2","date":"2021-02-24T13:18:50.000Z","updated":"2021-02-24T13:20:49.948Z","comments":true,"path":"2021/02/24/2-20210224-2/","link":"","permalink":"https://xxry.vip/2021/02/24/2-20210224-2/","excerpt":"","text":"Exception包括RuntimeException(运行时异常)和CheckedException(检查异常)： (1)运行时异常都是RuntimeException类及其子类异常，如：NullPointerException、IndexOutOfBoundsException、ArrayIndexOutOfBoundsException、ClassCastException、StringIndexOutOfBoundsException、WebServiceException、ArithmeticException等。 (2)检查异常是RuntimeException以外的异常，类型上都属于Exception类及其子类，如：NoSuchMethodException、IOException、EOFException、FileNotFoundException、NumberFormatException、SQLException等。","categories":[{"name":"back-end","slug":"back-end","permalink":"https://xxry.vip/categories/back-end/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://xxry.vip/tags/%E9%9D%A2%E8%AF%95/"},{"name":"Exception","slug":"Exception","permalink":"https://xxry.vip/tags/Exception/"}]},{"title":"微服务相关内容","slug":"2-20210224-1","date":"2021-02-24T12:34:59.000Z","updated":"2021-02-24T13:16:04.870Z","comments":true,"path":"2021/02/24/2-20210224-1/","link":"","permalink":"https://xxry.vip/2021/02/24/2-20210224-1/","excerpt":"1.什么是微服务？ 单个轻量级服务一般为一个单独微服务，微服务主要是专注某个功能的实现，比如登录系统只专注于用户登录方面功能的实现，讲究的是职责单一，开箱即用，可以独立运行。在 intellij idea 工具里面就是用maven开发的一个个独立的module，具体就是使用springboot 开发的一个小的模块，处理单一专业的业务逻辑，一个模块只做一个事情。","text":"1.什么是微服务？ 单个轻量级服务一般为一个单独微服务，微服务主要是专注某个功能的实现，比如登录系统只专注于用户登录方面功能的实现，讲究的是职责单一，开箱即用，可以独立运行。在 intellij idea 工具里面就是用maven开发的一个个独立的module，具体就是使用springboot 开发的一个小的模块，处理单一专业的业务逻辑，一个模块只做一个事情。 2.微服务之间的通讯 同步通信：SpringCloud和Dubbo都是现在主流的微服务架构，Dubbo通过 RPC 远程过程调用、SpringCloud通过REST接口json调用。 异步：通过消息队列，如：RabbitMq、ActiveMq、Kafka 等。 3.微服务的优缺点 优点：松耦合，关注单一业务功能，无关开发语言，团队规模降低。在开发中，不需要了解多有业务，只专注于当前功能，便利集中，功能小而精。微服务一个功能受损，对其他功能影响并不是太大，可以快速定位问题。微服务只专注于当前业务逻辑代码，不会和 html、css 或其他界面进行混合。可以灵活搭配技术进行开发。 缺点：随着服务数量增加，管理将会复杂起来，部署也变得更加麻烦，服务器需要增多，服务通信和调用压力增大，运维工程师压力增大，人力资源增多，系统依赖增强，数据一致性变得难以保证，且不易进行性能监控。 4.服务熔断和服务降级 服务熔断是当某服务不可用或响应超时的时候，为了防止整个系统出现雪崩而暂停对该服务的调用。 服务降级为了预防系统某些功能出现负荷过载或者响应慢的情况，暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的fallback错误处理信息。这样，虽然部分服务受损，但却保证了整个系统的稳定性和可用性。","categories":[{"name":"back-end","slug":"back-end","permalink":"https://xxry.vip/categories/back-end/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://xxry.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"面试","slug":"面试","permalink":"https://xxry.vip/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"hexo发布内容导致github自定义域名失效问题","slug":"1-20210224-1","date":"2021-02-23T16:00:38.000Z","updated":"2021-02-23T16:12:41.904Z","comments":true,"path":"2021/02/24/1-20210224-1/","link":"","permalink":"https://xxry.vip/2021/02/24/1-20210224-1/","excerpt":"在构建自己博客的时候，发现的这个问题： 每次将文章hexo d发布后，发现自己的blog界面打不开了，找了原因发现github里自定义的域名失效清空了，无奈去网上搜寻解决办法，经试验以下这个方法可以。","text":"在构建自己博客的时候，发现的这个问题： 每次将文章hexo d发布后，发现自己的blog界面打不开了，找了原因发现github里自定义的域名失效清空了，无奈去网上搜寻解决办法，经试验以下这个方法可以。 只要在根路径下source目录中添加一个新文件CNAME（这个为文件全称不用加后缀） 把这个文件用notepad打开写入自定义的域名 然后就ok了。","categories":[{"name":"front-end","slug":"front-end","permalink":"https://xxry.vip/categories/front-end/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xxry.vip/tags/hexo/"}]},{"title":"关于面试中基本的i++问题","slug":"20210223-2","date":"2021-02-23T15:22:36.000Z","updated":"2021-02-23T15:30:27.324Z","comments":true,"path":"2021/02/23/20210223-2/","link":"","permalink":"https://xxry.vip/2021/02/23/20210223-2/","excerpt":"我们知道自增自减运算符仅仅低于()，在考虑程序运算顺序的时候不必在意其他的运算符的优先级问题。例如：++i :使用i之前，使得i的值加1，i++使用i之后，使其值加1。 下面列举两个例子：","text":"我们知道自增自减运算符仅仅低于()，在考虑程序运算顺序的时候不必在意其他的运算符的优先级问题。例如：++i :使用i之前，使得i的值加1，i++使用i之后，使其值加1。 下面列举两个例子： ex1: public class Test1&#123; public static void main(String[] args)&#123; int i=0; i=i++ + ++i; //i++ 和++i的不同点在于一个是程序完毕后自增，一个是程序开始前自增。 第一个表达式i++，其值取i的值0，然后待下一个自增运算结束时计算一次i=i+1； 第二个表达式++i，其先计算一次i=i+1=0+1=1，然后补算i=i+1=1+1=2； 最终结果：i=0+2=2。 &#125; ex2: public class Test2&#123; static &#123; int x=5; &#125; int x,y; public static void main(String[] args)&#123; x- -; myMethod(); System.out.println(x + y++ +x ); &#125; public static void myMethod()&#123; y=x++ + ++x; &#125; &#125; 下面是对代码的解释： static &#123; int x=5; //静态方法里的局部变量，不影响后面的值。 &#125; x- -; //初始化x的值为0，此时x的值为 -1； public static void myMethod()&#123; y=x++ + ++x; // y= -1 + 1=0 前一个“x”不做任何运算，后一个“x” 自增2次。 &#125; 运行结果为：2 本文纯属个人理解，如有错误，望联系更改。","categories":[{"name":"back-end","slug":"back-end","permalink":"https://xxry.vip/categories/back-end/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://xxry.vip/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"关于eclipse下的android开发，运行项目时报错：androidmanifest.xml!","slug":"missing","date":"2021-02-23T15:08:10.000Z","updated":"2021-02-23T15:20:24.573Z","comments":true,"path":"2021/02/23/missing/","link":"","permalink":"https://xxry.vip/2021/02/23/missing/","excerpt":"","text":"今天练习Android开发时想要运行项目时报了一个错误：AndroidManifest.xml file missing! 但是我的这个文件明明存在啊。然后我就去网上找了说路径里有中文路径的原因，可是我的路径根本没错啊。后来我知道了一个方法：点击菜单栏中的Project——&gt;Clean….，再保存一下就可以了。再运行没错误了。","categories":[{"name":"back-end","slug":"back-end","permalink":"https://xxry.vip/categories/back-end/"}],"tags":[{"name":"Eclipse","slug":"Eclipse","permalink":"https://xxry.vip/tags/Eclipse/"},{"name":"android","slug":"android","permalink":"https://xxry.vip/tags/android/"}]}],"categories":[{"name":"back-end","slug":"back-end","permalink":"https://xxry.vip/categories/back-end/"},{"name":"front-end","slug":"front-end","permalink":"https://xxry.vip/categories/front-end/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://xxry.vip/tags/%E9%9D%A2%E8%AF%95/"},{"name":"Exception","slug":"Exception","permalink":"https://xxry.vip/tags/Exception/"},{"name":"微服务","slug":"微服务","permalink":"https://xxry.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"hexo","slug":"hexo","permalink":"https://xxry.vip/tags/hexo/"},{"name":"Eclipse","slug":"Eclipse","permalink":"https://xxry.vip/tags/Eclipse/"},{"name":"android","slug":"android","permalink":"https://xxry.vip/tags/android/"}]}